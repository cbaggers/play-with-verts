(defun-g some-frag-stage ((frag-pos :vec3)
                          (frag-normal :vec3)
                          (uv :vec2)
                          &uniform (light-pos :vec3)
                          (cam-pos :vec3)
                          (albedo :sampler-2d)
                          (spec-map :sampler-2d))
  (let* (;; we will multiply with color with the light-amount
         ;; to get our final color
         (object-color (texture albedo uv))

         ;; We need to normalize the normal because the linear
         ;; interpolation from the vertex shader will have
         ;; shortened it
         (frag-normal (normalize frag-normal))

         ;; ambient color is the same from all directions
         (ambient (vec3 0.2))

         ;; diffuse color is the cosine of the angle between the
         ;; light and the normal. As both the vectors are
         ;; normalized we can use the dot-product to get this.
         (vec-to-light (- light-pos frag-pos))
         (dir-to-light (normalize vec-to-light))
         (light-col (v! 1 0 0))
         (diffuse (saturate (dot dir-to-light frag-normal)))
         ;;
         (fudge 0.001)
         (light-dist (length (- light-pos frag-pos)))
         (attenuation-fudged (/ 1 (* light-dist light-dist fudge)))
         (diffuse-col (* (vec3 (* diffuse attenuation-fudged))
                         light-col))

         ;; The final light amount is the sum of the different
         ;; components
         (light-amount (+ ambient diffuse-col)))

    ;; And we multipy with the object color. This means that 0
    ;; light results in no color, and 1 light results in full
    ;; color. Cool!
    (* object-color (v! light-amount 1))))
